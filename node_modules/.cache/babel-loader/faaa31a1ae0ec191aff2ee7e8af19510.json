{"ast":null,"code":"var _jsxFileName = \"/Users/techi.s./Desktop/Wanderlust-SD/frontend/src/containers/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // import Loading from '../assets/img/loading.gif';\n// import postImage from '../assets/img/newspaper-icon-png.jpg';\n// import PostForm from '../components/Posts/PostForm';\n// import Post from '../components/Posts/Post';\n\nimport { fetchPosts } from '../reducks/posts/operations';\nimport { getPosts } from '../reducks/posts/selectors';\nimport Navbar from '../components/Places/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const selector = useSelector(state => state);\n  const posts = getPosts(selector);\n  let [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    dispatch(fetchPosts({\n      page\n    })); // eslint-disable-next-line\n  }, []); // Infinite Scroll Pagination Flow\n\n  const observer = useRef(); // Reference to a very last post element\n\n  const lastPostElement = useCallback(node => {\n    if (isLoading) return; // Disconnect reference from previous element, so that new last element is hook up correctly\n\n    if (observer.current) {\n      observer.current.disconnect();\n    } // Observe changes in the intersection of target element\n\n\n    observer.current = new IntersectionObserver(async entries => {\n      // That means that we are on the page somewhere, In our case last element of the page\n      if (entries[0].isIntersecting && posts.next) {\n        // Proceed fetch new page\n        setIsLoading(true);\n        setPage(++page);\n        await dispatch(fetchPosts({\n          page\n        }));\n        setIsLoading(false);\n      }\n    }); // Reconnect back with the new last post element\n\n    if (node) {\n      observer.current.observe(node);\n    }\n  }, // eslint-disable-next-line\n  [posts.next]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"content\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"tf63ety61+BXkOMtutks0bOWBUA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","useDispatch","useSelector","fetchPosts","getPosts","Navbar","Home","dispatch","selector","state","posts","page","setPage","isLoading","setIsLoading","observer","lastPostElement","node","current","disconnect","IntersectionObserver","entries","isIntersecting","next","observe"],"sources":["/Users/techi.s./Desktop/Wanderlust-SD/frontend/src/containers/Home.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import Loading from '../assets/img/loading.gif';\n// import postImage from '../assets/img/newspaper-icon-png.jpg';\n// import PostForm from '../components/Posts/PostForm';\n// import Post from '../components/Posts/Post';\nimport { fetchPosts } from '../reducks/posts/operations';\nimport { getPosts } from '../reducks/posts/selectors';\nimport Navbar from '../components/Places/Navbar';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const selector = useSelector(state => state);\n    const posts = getPosts(selector);\n    let [page, setPage] = useState(1);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        dispatch(fetchPosts({ page }));\n        // eslint-disable-next-line\n    }, []);\n\n    // Infinite Scroll Pagination Flow\n    const observer = useRef();\n\n    // Reference to a very last post element\n    const lastPostElement = useCallback(\n        node => {\n            if (isLoading) return;\n            // Disconnect reference from previous element, so that new last element is hook up correctly\n            if (observer.current) {\n                observer.current.disconnect();\n            }\n\n            // Observe changes in the intersection of target element\n            observer.current = new IntersectionObserver(async entries => {\n                // That means that we are on the page somewhere, In our case last element of the page\n                if (entries[0].isIntersecting && posts.next) {\n                    // Proceed fetch new page\n                    setIsLoading(true);\n                    setPage(++page);\n                    await dispatch(fetchPosts({ page }));\n                    setIsLoading(false);\n                }\n            });\n\n            // Reconnect back with the new last post element\n            if (node) {\n                observer.current.observe(node);\n            }\n        },\n        // eslint-disable-next-line\n        [posts.next]\n    );\n\n    return (\n        <section className=\"content\">\n            <Navbar/>\n            <content/>\n            <Footer/>\n                    \n        </section>\n    );\n};\n\nexport default Home;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,EAAgDC,QAAhD,QAAgE,OAAhE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EAAA;;EACf,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAMO,QAAQ,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAV,CAA5B;EACA,MAAMC,KAAK,GAAGN,QAAQ,CAACI,QAAD,CAAtB;EACA,IAAI,CAACG,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAA9B;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;EAEAF,SAAS,CAAC,MAAM;IACZS,QAAQ,CAACJ,UAAU,CAAC;MAAEQ;IAAF,CAAD,CAAX,CAAR,CADY,CAEZ;EACH,CAHQ,EAGN,EAHM,CAAT,CAPe,CAYf;;EACA,MAAMI,QAAQ,GAAGhB,MAAM,EAAvB,CAbe,CAef;;EACA,MAAMiB,eAAe,GAAGnB,WAAW,CAC/BoB,IAAI,IAAI;IACJ,IAAIJ,SAAJ,EAAe,OADX,CAEJ;;IACA,IAAIE,QAAQ,CAACG,OAAb,EAAsB;MAClBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB;IACH,CALG,CAOJ;;;IACAJ,QAAQ,CAACG,OAAT,GAAmB,IAAIE,oBAAJ,CAAyB,MAAMC,OAAN,IAAiB;MACzD;MACA,IAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,IAA6BZ,KAAK,CAACa,IAAvC,EAA6C;QACzC;QACAT,YAAY,CAAC,IAAD,CAAZ;QACAF,OAAO,CAAC,EAAED,IAAH,CAAP;QACA,MAAMJ,QAAQ,CAACJ,UAAU,CAAC;UAAEQ;QAAF,CAAD,CAAX,CAAd;QACAG,YAAY,CAAC,KAAD,CAAZ;MACH;IACJ,CATkB,CAAnB,CARI,CAmBJ;;IACA,IAAIG,IAAJ,EAAU;MACNF,QAAQ,CAACG,OAAT,CAAiBM,OAAjB,CAAyBP,IAAzB;IACH;EACJ,CAxB8B,EAyB/B;EACA,CAACP,KAAK,CAACa,IAAP,CA1B+B,CAAnC;EA6BA,oBACI;IAAS,SAAS,EAAC,SAAnB;IAAA,wBACI,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH,CArDD;;GAAMjB,I;UACeL,W,EACAC,W;;;KAFfI,I;AAuDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}