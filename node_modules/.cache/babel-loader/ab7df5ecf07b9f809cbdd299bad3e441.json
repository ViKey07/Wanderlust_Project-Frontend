{"ast":null,"code":"var _jsxFileName = \"/Users/techi.s./Desktop/Wanderlust-SD/frontend/src/containers/Home.jsx\";\nimport React from 'react';\nimport Header from '../components/Places/Header'; // import { useDispatch, useSelector } from 'react-redux';\n// import Loading from '../assets/img/loading.gif';\n// import postImage from '../assets/img/newspaper-icon-png.jpg';\n// import PostForm from '../components/Posts/PostForm';\n// import Post from '../components/Posts/Post';\n// import { fetchPosts } from '../reducks/posts/operations';\n// import { getPosts } from '../reducks/posts/selectors';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  // const dispatch = useDispatch();\n  // const selector = useSelector(state => state);\n  // const posts = getPosts(selector);\n  // let [page, setPage] = useState(1);\n  // const [isLoading, setIsLoading] = useState(false);\n  // useEffect(() => {\n  //     dispatch(fetchPosts({ page }));\n  //     // eslint-disable-next-line\n  // }, []);\n  // Infinite Scroll Pagination Flow\n  // const observer = useRef();\n  // Reference to a very last post element\n  // const lastPostElement = useCallback(\n  //     node => {\n  //         if (isLoading) return;\n  //         // Disconnect reference from previous element, so that new last element is hook up correctly\n  //         if (observer.current) {\n  //             observer.current.disconnect();\n  //         }\n  //         // Observe changes in the intersection of target element\n  //         observer.current = new IntersectionObserver(async entries => {\n  //             // That means that we are on the page somewhere, In our case last element of the page\n  //             if (entries[0].isIntersecting && posts.next) {\n  //                 // Proceed fetch new page\n  //                 setIsLoading(true);\n  //                 setPage(++page);\n  //                 await dispatch(fetchPosts({ page }));\n  //                 setIsLoading(false);\n  //             }\n  //         });\n  //         // Reconnect back with the new last post element\n  //         if (node) {\n  //             observer.current.observe(node);\n  //         }\n  //     },\n  //     // eslint-disable-next-line\n  //     [posts.next]\n  // );\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","Header","Home"],"sources":["/Users/techi.s./Desktop/Wanderlust-SD/frontend/src/containers/Home.jsx"],"sourcesContent":["import React from 'react';\nimport Header from '../components/Places/Header';\n// import { useDispatch, useSelector } from 'react-redux';\n// import Loading from '../assets/img/loading.gif';\n// import postImage from '../assets/img/newspaper-icon-png.jpg';\n// import PostForm from '../components/Posts/PostForm';\n// import Post from '../components/Posts/Post';\n// import { fetchPosts } from '../reducks/posts/operations';\n// import { getPosts } from '../reducks/posts/selectors';\n\nconst Home = () => {\n    // const dispatch = useDispatch();\n    // const selector = useSelector(state => state);\n    // const posts = getPosts(selector);\n    // let [page, setPage] = useState(1);\n    // const [isLoading, setIsLoading] = useState(false);\n\n    // useEffect(() => {\n    //     dispatch(fetchPosts({ page }));\n    //     // eslint-disable-next-line\n    // }, []);\n\n    // Infinite Scroll Pagination Flow\n    // const observer = useRef();\n\n    // Reference to a very last post element\n    // const lastPostElement = useCallback(\n    //     node => {\n    //         if (isLoading) return;\n    //         // Disconnect reference from previous element, so that new last element is hook up correctly\n    //         if (observer.current) {\n    //             observer.current.disconnect();\n    //         }\n\n    //         // Observe changes in the intersection of target element\n    //         observer.current = new IntersectionObserver(async entries => {\n    //             // That means that we are on the page somewhere, In our case last element of the page\n    //             if (entries[0].isIntersecting && posts.next) {\n    //                 // Proceed fetch new page\n    //                 setIsLoading(true);\n    //                 setPage(++page);\n    //                 await dispatch(fetchPosts({ page }));\n    //                 setIsLoading(false);\n    //             }\n    //         });\n\n    //         // Reconnect back with the new last post element\n    //         if (node) {\n    //             observer.current.observe(node);\n    //         }\n    //     },\n    //     // eslint-disable-next-line\n    //     [posts.next]\n    // );\n\n    return (\n        <section className=\"content\">\n            <Header/>      \n        </section>\n    );\n};\n\nexport default Home;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,6BAAnB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;EACf;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA,oBACI;IAAS,SAAS,EAAC,SAAnB;IAAA,uBACI,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAlDD;;KAAMA,I;AAoDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}